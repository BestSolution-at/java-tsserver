/*
 * generated by Xtext
 */
package at.bestsolution.typescript.service.spec.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import at.bestsolution.typescript.service.spec.tSSpec.DomainElement
import at.bestsolution.typescript.service.spec.tSSpec.ServiceDefs
import at.bestsolution.typescript.service.spec.tSSpec.GenericTypeArgument
import at.bestsolution.typescript.service.spec.tSSpec.CommandDef
import at.bestsolution.typescript.service.spec.tSSpec.ServiceDef

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TSSpecGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val defs = resource.contents.head as ServiceDefs
		defs.domainElements.filter[! enumValues.empty].forEach[
			fsa.generateFile((defs.packageName+"."+name).replace('.','/')+".java", generateEnumType)
		]
		defs.domainElements.filter[cust].forEach[
			fsa.generateFile((defs.packageName+"."+name).replace('.','/')+".java", generateInterface)
		]
		defs.domainElements.filter[cust].forEach[
			fsa.generateFile((defs.packageName+".pojo"+"."+name+"Pojo").replace('.','/')+".java", generateCustType)
		]
		defs.serviceDefs.forEach[s|
			fsa.generateFile((defs.packageName+".services." + s.name).replace('.','/')+".java", s.generateServiceAPI)
			fsa.generateFile((defs.packageName+".internal.impl." + s.name+"Impl").replace('.','/')+".java", s.generateServiceImpl)
		]
		fsa.generateFile((defs.packageName+".services.ModelBuilderService").replace('.','/')+".java", defs.generateModelServiceAPI);
		fsa.generateFile((defs.packageName+".internal.impl.ModelBuilderServiceImpl").replace('.','/')+".java", defs.generateModelServiceImpl);
	}

	def generateModelServiceAPI(ServiceDefs d) '''
	package «d.packageName».services;

	import «d.packageName».model.*;

	public interface ModelBuilderService {

		«FOR m : d.domainElements.filter[cust]»
		public «m.name.simpleName».Builder create«m.name.simpleName»(«m.attributes.filter[!optional].map[ a | a.type.typeString + " " + a.name].join(", ")»);

		«ENDFOR»
	}
	'''

	def generateModelServiceImpl(ServiceDefs d) '''
		package «d.packageName».internal.impl;

		import «d.packageName».services.ModelBuilderService;
		import «d.packageName».model.*;
		import «d.packageName».pojo.model.*;

		public class ModelBuilderServiceImpl implements ModelBuilderService {
			«FOR m : d.domainElements.filter[cust]»
				public «m.name.simpleName».Builder create«m.name.simpleName»(«m.attributes.filter[!optional].map[ a | a.type.typeString + " " + a.name].join(", ")») {
					return «m.name.simpleName»Pojo.create(«m.attributes.filter[!optional].map[ a | a.name].join(", ")»);
				}
			«ENDFOR»
		}
	'''

	def generateRequestType(CommandDef d) '''
	package «(d.eContainer as ServiceDefs).packageName».internal;

	«IF d.attributes.exists[a| a.type.type.cust]»
	import «(d.eContainer as ServiceDefs).packageName».model.*;
	«ENDIF»

	public class «d.name.toFirstUpper»Request {
		«FOR a : d.attributes»
			private «a.type.typeString» «a.name»;
		«ENDFOR»

		public «d.name.toFirstUpper»Request(«d.attributes.map[a| a.type.typeString + " " + a.name].join(", ")») {
			«FOR a : d.attributes»
			this.«a.name» = «a.name»;
			«ENDFOR»
		}

		«FOR a : d.attributes»
			public void set«a.name.toFirstUpper»(«a.type.typeString» «a.name») {
				this.«a.name» = «a.name»;
			}

			public «a.type.typeString» get«a.name.toFirstUpper»() {
				return this.«a.name»;
			}
		«ENDFOR»
	}
	'''

	def generateServiceAPI(ServiceDef d) '''
	package «(d.eContainer as ServiceDefs).packageName».services;

	import «(d.eContainer as ServiceDefs).packageName».model.*;

	public interface «d.name» {
		«FOR c : d.commandList»
			public «c.returnVal.typeString» «c.name»(«c.attributes.map[a|a.type.typeString + " " + a.name].join(", ")»);
		«ENDFOR»
		«FOR e : d.eventList»
			public at.bestsolution.typescript.service.api.Registration «e.name»(java.util.function.Consumer<«e.type.typeString»> consumer);
		«ENDFOR»
	}
	'''

	def generateServiceImpl(ServiceDef d) '''
	package «(d.eContainer as ServiceDefs).packageName».internal.impl;

	import «(d.eContainer as ServiceDefs).packageName».model.*;
	import «(d.eContainer as ServiceDefs).packageName».pojo.model.*;
	import at.bestsolution.typescript.service.api.services.Dispatcher;

	public class «d.name»Impl implements «(d.eContainer as ServiceDefs).packageName».services.«d.name» {
		private final Dispatcher dispatcher;
		private final String projectId;

		public «d.name»Impl(String projectId, Dispatcher dispatcher) {
			this.projectId = projectId;
			this.dispatcher = dispatcher;
		}

		«FOR c : d.commandList»
			«IF c.returnVal != null && c.returnVal.type.cust && c.returnVal.list»@SuppressWarnings("unchecked")«ENDIF»
			public «c.returnVal.typeString» «c.name»(«c.attributes.map[a|a.type.typeString + " " + a.name].join(", ")») {
				«IF c.returnVal.typeString != "void"»
				try {
					«IF c.returnVal.list»
					return «IF c.returnVal.type.cust»(«c.returnVal.typeString»)((java.util.List<?>)«ENDIF»dispatcher.sendMultiValueRequest("«d.name»","«c.name»",«c.returnVal.type.name.simpleName»«IF c.returnVal.type.cust»Pojo«ENDIF».class, projectId«IF !c.attributes.empty»,«c.attributes.map[a|a.name].join(", ")»«ENDIF»).get()«IF c.returnVal.type.cust»)«ENDIF»;
					«ELSE»
					return dispatcher.sendSingleValueRequest("«d.name»","«c.name»",«c.returnVal.typeStringPojo».class, projectId«IF !c.attributes.empty»,«c.attributes.map[a|a.name].join(", ")»«ENDIF»).get();
					«ENDIF»
				} catch( InterruptedException | java.util.concurrent.ExecutionException e ) {
					throw new RuntimeException(e);
				}
				«ELSE»
				dispatcher.sendVoidRequest("«d.name»","«c.name»", projectId«IF !c.attributes.empty»,«c.attributes.map[a|a.name].join(", ")»«ENDIF»);
				«ENDIF»
			}

		«ENDFOR»
	}
	'''

	def generateEnumType(DomainElement e) '''
	package «(e.eContainer as ServiceDefs).packageName».«e.name.substring(0,e.name.lastIndexOf('.'))»;

	public enum «e.name.simpleName» {
		«FOR en : e.enumValues»
			«IF e.enumValues.head != en», «ENDIF»«en.name»(«IF e.isStringEnum»"«en.value»"«ELSE»«en.intValue»«ENDIF»)«IF e.enumValues.last == en»;«ENDIF»
		«ENDFOR»

		private final «IF e.isStringEnum»String«ELSE»int«ENDIF» value;

		«e.name.simpleName»(«IF e.isStringEnum»String«ELSE»int«ENDIF» value) {
			this.value = value;
		}

		public «IF e.isStringEnum»String«ELSE»int«ENDIF» asValue() {
			return this.value;
		}

		public static «e.name.simpleName» fromValue(«IF e.isStringEnum»String«ELSE»int«ENDIF» value) {
			switch( value ) {
				«FOR en : e.enumValues»
					case «IF e.isStringEnum»"«en.value»"«ELSE»«en.intValue»«ENDIF»: return «en.name»;
				«ENDFOR»
				default:
					return «e.enumValues.head.name»;
			}
		}
	}
	'''

	def generateInterface(DomainElement e) '''
	package «(e.eContainer as ServiceDefs).packageName».«e.name.substring(0,e.name.lastIndexOf('.'))»;

	public interface «e.name.simpleName» «IF e.superType != null»extends «e.superType.name.simpleName»«ENDIF» {
		«FOR a : e.attributes»
			public «a.type.typeString» «a.name.simpleName»();
		«ENDFOR»

		public interface Builder {
			«FOR a : e.attributes.filter[optional]»
				public Builder «a.name»( «a.type.typeString» value );
			«ENDFOR»
			public «e.name.simpleName» build();
		}
	}
	'''

	def generateCustType(DomainElement e) '''
	package «(e.eContainer as ServiceDefs).packageName».pojo.«e.name.substring(0,e.name.lastIndexOf('.'))»;

	import «(e.eContainer as ServiceDefs).packageName».«e.name.substring(0,e.name.lastIndexOf('.'))».*;

	«IF e.attributes.findFirst[type.list && ! type.type.isIsEnum] != null»@SuppressWarnings("unchecked")«ENDIF»
	public class «e.name.simpleName»Pojo «IF e.superType != null»extends «e.superType.name.simpleName»Pojo«ENDIF» implements «e.name.simpleName» {
		«FOR a : e.attributes»
			«IF a.type.type.isIsEnum»
				«IF a.type.list»
					private String «a.name.simpleName»  = "«a.type.type.enumValues.head.value»";
				«ELSE»
					private «IF a.type.type.isStringEnum»String«ELSE»int«ENDIF» «a.name.simpleName»  = «IF a.type.type.isStringEnum»"«a.type.type.enumValues.head.value»"«ELSE»«a.type.type.enumValues.head.intValue»«ENDIF»;
				«ENDIF»
			private «a.type.typeStringPojo» _«a.name.simpleName» = null;
			«ELSE»
			private «a.type.typeStringPojo» «a.name.simpleName» «IF a.value != null» = «a.value»«ENDIF»;
			«ENDIF»
		«ENDFOR»

		public «e.name.simpleName»Pojo() {
		}

		«FOR a : e.attributes»
			«IF a.type.type.isIsEnum»
			public «a.type.typeString» «a.name.simpleName»() {
				if( _«a.name.simpleName» != null ) return _«a.name.simpleName»;
				«IF a.type.isList»
					return _«a.name.simpleName» = java.util.stream.Stream.of(«a.name.simpleName».split(",")).map( s -> «(a.type.type.eContainer as ServiceDefs).packageName + "." + a.type.type.name».fromValue(s) ).collect( java.util.stream.Collectors.toList() );
				«ELSE»
					return _«a.name.simpleName» = «a.type.typeStringPojo».fromValue(this.«a.name.simpleName»);
				«ENDIF»
			}
			«ELSE»
			public «a.type.typeString» «a.name.simpleName»() {
				return «IF a.type.list»(«a.type.typeString»)((java.util.List<?>)«ENDIF»this.«a.name.simpleName»«IF a.type.list»)«ENDIF»;
			}
			«ENDIF»
«««
«««			«IF a.type.type.isIsEnum»
«««				public void set«a.name.simpleName.toFirstUpper»(String «a.name.simpleName») {
«««					this.«a.name.simpleName» = «a.type.typeStringPojo».fromStringValue(«a.name.simpleName»);
«««				}
«««			«ELSE»
«««				public void set«a.name.simpleName.toFirstUpper»(«a.type.typeStringPojo» «a.name.simpleName») {
«««					this.«a.name.simpleName» = «a.name.simpleName»;
«««				}
«««			«ENDIF»
		«ENDFOR»
		public static Builder create(«e.attributes.filter[!optional].map[ a | a.type.typeString + " " + a.name].join(", ")») {
			return new BuilderImpl(new «e.name.simpleName»Pojo()«IF !e.attributes.filter[!optional].isEmpty», «e.attributes.filter[!optional].map[ a | a.name].join(", ")»«ENDIF»);
		}

		public static class BuilderImpl implements Builder {
			private final «e.name.simpleName»Pojo pojo;

			BuilderImpl(«e.name.simpleName»Pojo pojo«IF !e.attributes.filter[!optional].isEmpty», «e.attributes.filter[!optional].map[ a | a.type.typeString + " " + a.name].join(", ")»«ENDIF») {
				this.pojo = pojo;
				«FOR a : e.attributes.filter[!optional]»
					«IF a.type.type.isEnum»
						this.pojo._«a.name» = «a.name»;
						«IF a.type.isList»
							this.pojo.«a.name» = «a.name».stream().map( v -> v.asValue() ).collect( java.util.stream.Collectors.joining(",") );
						«ELSE»
							this.pojo.«a.name» = «a.name».asValue();
						«ENDIF»
					«ELSE»
						this.pojo.«a.name» = («a.type.typeStringPojo»)«IF a.type.list»(java.util.List<?>)«ENDIF»«a.name»;
					«ENDIF»
				«ENDFOR»
			}

			«FOR a : e.attributes.filter[optional]»
				public Builder «a.name»( «a.type.typeString» «a.name» ) {
					«IF a.type.type.isEnum»
						this.pojo._«a.name» = «a.name»;
						«IF a.type.isList»
							this.pojo.«a.name» = «a.name».stream().map( v -> v.asValue() ).collect( java.util.stream.Collectors.joining(",") );
						«ELSE»
							this.pojo.«a.name» = «a.name».asValue();
						«ENDIF»
					«ELSE»
						this.pojo.«a.name» = («a.type.typeStringPojo»)«IF a.type.list»(java.util.List<?>)«ENDIF»«a.name»;
					«ENDIF»
					return this;
				}
			«ENDFOR»

			public «e.name.simpleName» build() {
				return this.pojo;
			}
		}

		public String toString() {
			return "«e.name.simpleName»@"+hashCode()+"[«e.attributes.map[name + ' = "+'+name+'()+"'].join(", ")»]";
		}
	}
	'''

	def String typeStringPojo(GenericTypeArgument type) {
		if( type == null ) {
			return "void"
		}

		var name = type.type.name.simpleName;

		if( type.type.isCust ) {
			name += "Pojo";
		} else if( type.type.isIsEnum ) {
			name = (type.type.eContainer as ServiceDefs).packageName + "." + type.type.name
		}

		if( type.type.realType != null) {
			name = type.type.realType
		}

		if( ! type.arguments.empty ) {
			var rv = name
			if( ! type.arguments.empty ) {
				rv += "<"
				rv += type.arguments.map[typeString].map[toObjectType].join(",")
				rv += ">"
			}
			if( type.list ) {
				rv = "java.util.List<"+rv.toObjectType+">"
			}
			return rv
		} else {
			var rv = name;
			if( type.list ) {
				rv = "java.util.List<"+rv.toObjectType+">"
			}
			return rv
		}
	}

	def String typeString(GenericTypeArgument type) {
		if( type == null ) {
			return "void"
		}
		var name = type.type.name.simpleName;

		if( type.type.realType != null) {
			name = type.type.realType
		}

		if( ! type.arguments.empty ) {
			var rv = name
			if( ! type.arguments.empty ) {
				rv += "<"
				rv += type.arguments.map[typeString].map[toObjectType].join(",")
				rv += ">"
			}
			if( type.list ) {
				rv = "java.util.List<"+rv.toObjectType+">"
			}
			return rv
		} else {
			var rv = name;
			if( type.list ) {
				rv = "java.util.List<"+rv.toObjectType+">"
			}
			return rv
		}
	}

	def static toObjectType(String t) {
		if( t == 'int' ) {
			return "Integer"
		}
		return t;
	}

	def simpleName(String name) {
		if( name.indexOf('.') == -1 ) {
			return name
		} else {
			return name.substring(name.lastIndexOf('.')+1)
		}
	}

	def isStringEnum(DomainElement e) {
		return e.enumValues.findFirst[value!=null] != null;
	}
}
