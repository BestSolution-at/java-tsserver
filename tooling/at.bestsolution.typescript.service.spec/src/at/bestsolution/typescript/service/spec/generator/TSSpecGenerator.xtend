/*
 * generated by Xtext
 */
package at.bestsolution.typescript.service.spec.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import at.bestsolution.typescript.service.spec.tSSpec.DomainElement
import at.bestsolution.typescript.service.spec.tSSpec.ServiceDefs
import at.bestsolution.typescript.service.spec.tSSpec.GenericTypeArgument
import java.util.concurrent.ExecutionException

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TSSpecGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val defs = resource.contents.head as ServiceDefs
		defs.domainElements.filter[! enumValues.empty].forEach[
			fsa.generateFile((defs.packageName+"."+name).replace('.','/')+".java", generateEnumType)
		]
		defs.domainElements.filter[cust].forEach[
			fsa.generateFile((defs.packageName+"."+name).replace('.','/')+".java", generateCustType)
		]

//		defs.commandList.forEach[s|
//			fsa.generateFile((defs.packageName+".model."+s.name.toFirstUpper+"Result").replace('.','/')+".java", s.generateRequestResultType)
//			fsa.generateFile((defs.packageName+".model."+s.name.toFirstUpper+"Request").replace('.','/')+".java", s.generateRequestType)
//		]
		fsa.generateFile((defs.packageName+".internal.local.LocalTSService").replace(".","/")+".java", defs.generateLocalService)
		fsa.generateFile((defs.packageName+".services.TSService").replace('.','/')+".java", defs.generateServiceAPI)
	}

	def generateServiceAPI(ServiceDefs defs) '''
	package «defs.packageName».services;

	import «defs.packageName».model.*;

	public interface TSService {
		«FOR c : defs.commandList»
			public «c.returnVal.typeString» «c.name»(«c.attributes.map[a|a.type.typeString + " " + a.name].join(", ")»);
		«ENDFOR»
		«FOR e : defs.eventList»
			public at.bestsolution.typescript.service.api.Registration «e.name»(java.util.function.Consumer<«e.type.typeString»> consumer);
		«ENDFOR»
	}
	'''

	def generateLocalService(ServiceDefs defs) '''
	package «defs.packageName».internal.local;

	import «defs.packageName».TSServerConfiguration;
	import «defs.packageName».model.*;
	import com.google.gson.JsonObject;
	import com.google.gson.Gson;
	import java.util.concurrent.Future;
	import java.util.concurrent.CompletableFuture;
	import java.util.concurrent.atomic.AtomicInteger;
	import java.util.HashMap;
	import java.util.Map;
	import java.io.IOException;
	import java.io.BufferedReader;
	import java.io.InputStreamReader;


	public class LocalTSService implements «defs.packageName».services.TSService {
		private AtomicInteger requestCount = new AtomicInteger();
		private Map<Integer,CompletableFuture<JsonObject>> waitingResponseConsumerMap = new HashMap<>();
		private Process p;
		private TSServerConfiguration configuration;
		private String tsServer = "";
		private String id;

		«FOR e : defs.eventList»
		private final java.util.List<java.util.function.Consumer<«e.type.typeString»>> «e.name»ConsumerList = new java.util.ArrayList<>();
		«ENDFOR»

		public LocalTSService(TSServerConfiguration configuration, String id) {
			this.id = id;
			this.configuration = configuration;

			if( this.configuration != null ) {
				configuration.addConfigurationChangeConsumer(this::handleConfigurationChange);
			}
			startServer();
		}

		private void handleConfigurationChange(String serverBinary) {
			startServer();
		}

		«FOR c : defs.commandList»
			public «c.returnVal.typeString» «c.name»(«c.attributes.map[a|a.type.typeString + " " + a.name].join(", ")») {
				«IF c.returnVal.typeString != "void"»
				try {
					JsonObject o = sendRequest("«c.name»",«IF c.attributes.isEmpty»null«ELSE»/* requestObject */ null«ENDIF»).get();
					if( o.has("success") && o.get("success").getAsBoolean() ) {
						«IF c.returnVal.isList»
							com.google.gson.JsonArray ar = o.get("body").getAsJsonArray();
							«c.returnVal.typeString» rv = new «c.returnVal.type.name.simpleName»[ar.size()];

							for( int i = 0; i < ar.size(); i++ ) {
								rv[i] = new com.google.gson.Gson().fromJson(o.get("body"), «c.returnVal.type.name.simpleName».class);
							}
							return rv;
						«ELSE»
							return new com.google.gson.Gson().fromJson(o.get("body"), «c.returnVal.type.name.simpleName».class);
						«ENDIF»
					} else {
						throw new IllegalStateException("Requested failed");
					}
				} catch (InterruptedException | java.util.concurrent.ExecutionException e) {
					throw new IllegalStateException(e);
				}
				«ELSE»
				sendVoidRequest("«c.name»",«IF c.attributes.isEmpty»null«ELSE»/* requestObject */ null«ENDIF»);
				«ENDIF»
			}
		«ENDFOR»
		«FOR e : defs.eventList»
			public at.bestsolution.typescript.service.api.Registration «e.name»(java.util.function.Consumer<«e.type.typeString»> consumer) {
				return () -> {};
			}
		«ENDFOR»

		private void startServer() {
			if(p != null && p.isAlive() ) {
				p.destroy();
			}
			String binary = configuration == null ? tsServer : configuration.getServerBinary();

			try {
				p = Runtime.getRuntime().exec(binary);

				Thread t = new Thread() {
					public void run() {
						try {
							BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
							String l = null;
							while( (l = r.readLine()) != null ) {
								dispatch(l);
							}
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				};
				t.setDaemon(true);
				t.start();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

		private void dispatch(String input) {
			com.google.gson.JsonParser p = new com.google.gson.JsonParser();
			com.google.gson.JsonObject root = (com.google.gson.JsonObject) p.parse(input);

			String type = root.get("type").getAsString();

			if( "event".equals(type) && root.has("event") ) {
				switch(root.get("event").getAsString()) {
					«FOR e : defs.eventList»
						case "«e.name»": {
							«e.type.typeString» o = new com.google.gson.Gson().fromJson(root.get("body"), «e.type.typeString».class);
							java.util.List<java.util.function.Consumer<«e.type.typeString»>> l;

							synchronized(«e.name»ConsumerList) {
								l = new java.util.ArrayList<>(«e.name»ConsumerList);
							}
							l.stream().forEach( c -> c.accept(o));
							break;
						}
					«ENDFOR»
					default:
						break;
				}
			} else if( "response".equals(type) && root.has("request_seq") ) {
				Integer id = root.get("request_seq").getAsInt();
				CompletableFuture<JsonObject> future;
				synchronized(waitingResponseConsumerMap) {
					future = waitingResponseConsumerMap.remove(id);
				}

				if( future != null ) {
					future.complete(root);
				}
			}
		}

		private Future<JsonObject> sendRequest(String method, Object request) {
			CompletableFuture<JsonObject> f = new CompletableFuture<>();
			Integer seq = requestCount.incrementAndGet();

			synchronized(waitingResponseConsumerMap) {
				waitingResponseConsumerMap.put(seq, f);
			}

			sendVoidRequest(method,request);

			return f;
		}

		private void sendVoidRequest(String method, Object request) {
			String r = "{ \"seq\" : seq, \"type\" : \"command\"";
			if( request != null ) {
				r += ", \"arguments\" :  " + new Gson().toJson(request);
			}
			r += "}";
			r = r.replace('\n', ' ');
			r = r.replace('\r', ' ');
			r += "\n";
			try {
				p.getOutputStream().write(r.getBytes());
				p.getOutputStream().flush();
			} catch (java.io.IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	'''

	def generateEnumType(DomainElement e) '''
	package «(e.eContainer as ServiceDefs).packageName».«e.name.substring(0,e.name.lastIndexOf('.'))»;

	public enum «e.name.simpleName» {
		«FOR en : e.enumValues»
			«IF e.enumValues.head != en»,«ENDIF»«en.name»
		«ENDFOR»
	}
	'''

	def generateCustType(DomainElement e) '''
	package «(e.eContainer as ServiceDefs).packageName».«e.name.substring(0,e.name.lastIndexOf('.'))»;

	import java.util.Map;

	public class «e.name.simpleName» «IF e.superType != null»extends «e.superType.name.simpleName»«ENDIF» {
		«FOR a : e.attributes»
			private «a.type.typeString» «a.name.simpleName» «IF a.value != null» = «a.value»«ENDIF»;
		«ENDFOR»

		public «e.name.simpleName»() {
		}

		«FOR a : e.attributes»
			public «a.type.typeString» get«a.name.simpleName.toFirstUpper»() {
				return this.«a.name.simpleName»;
			}

			public void set«a.name.simpleName.toFirstUpper»(«a.type.typeString» «a.name.simpleName») {
				this.«a.name.simpleName» = «a.name.simpleName»;
			}
		«ENDFOR»

		public String toString() {
			return "«e.name.simpleName»@"+hashCode()+"[«e.attributes.map[name + ' = "+'+name+'+"'].join(", ")»]";
		}
	}
	'''

	def String typeString(GenericTypeArgument type) {
		if( type == null ) {
			return "void"
		}
		var name = type.type.name.simpleName;

		if( type.type.realType != null) {
			name = type.type.realType
		}

		if( ! type.arguments.empty ) {
			var rv = name
			if( ! type.arguments.empty ) {
				rv += "<"
				rv += type.arguments.map[typeString].join(",")
				rv += ">"
			}
			if( type.list ) {
				rv += "[]"
			}
			return rv
		} else {
			var rv = name;
			if( type.list ) {
				rv += "[]"
			}
			return rv
		}
	}

	def simpleName(String name) {
		if( name.indexOf('.') == -1 ) {
			return name
		} else {
			return name.substring(name.lastIndexOf('.')+1)
		}
	}
}
