/*
 * generated by Xtext
 */
grammar InternalTSSpec;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.bestsolution.typescript.service.spec.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bestsolution.typescript.service.spec.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bestsolution.typescript.service.spec.services.TSSpecGrammarAccess;

}

@parser::members {

 	private TSSpecGrammarAccess grammarAccess;
 	
    public InternalTSSpecParser(TokenStream input, TSSpecGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ServiceDefs";	
   	}
   	
   	@Override
   	protected TSSpecGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleServiceDefs
entryRuleServiceDefs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceDefsRule()); }
	 iv_ruleServiceDefs=ruleServiceDefs 
	 { $current=$iv_ruleServiceDefs.current; } 
	 EOF 
;

// Rule ServiceDefs
ruleServiceDefs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getServiceDefsAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceDefsAccess().getPackageNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_packageName_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceDefsRule());
	        }
       		set(
       			$current, 
       			"packageName",
        		lv_packageName_1_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceDefsAccess().getDomainElementsDomainElementParserRuleCall_2_0()); 
	    }
		lv_domainElements_2_0=ruleDomainElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceDefsRule());
	        }
       		add(
       			$current, 
       			"domainElements",
        		lv_domainElements_2_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.DomainElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceDefsAccess().getServiceDefsServiceDefParserRuleCall_3_0()); 
	    }
		lv_serviceDefs_3_0=ruleServiceDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceDefsRule());
	        }
       		add(
       			$current, 
       			"serviceDefs",
        		lv_serviceDefs_3_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.ServiceDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDomainElement
entryRuleDomainElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainElementRule()); }
	 iv_ruleDomainElement=ruleDomainElement 
	 { $current=$iv_ruleDomainElement.current; } 
	 EOF 
;

// Rule DomainElement
ruleDomainElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_doc_0_0=RULE_DOC
		{
			newLeafNode(lv_doc_0_0, grammarAccess.getDomainElementAccess().getDocDOCTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainElementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.DOC");
	    }

)
)*((	otherlv_1='javatype' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDomainElementAccess().getJavatypeKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainElementAccess().getNameQualifiedNameParserRuleCall_1_0_1_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_cust_3_0=	'cust' 
    {
        newLeafNode(lv_cust_3_0, grammarAccess.getDomainElementAccess().getCustCustKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainElementRule());
	        }
       		setWithLastConsumed($current, "cust", true, "cust");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainElementAccess().getNameQualifiedNameParserRuleCall_1_1_1_0()); 
	    }
		lv_name_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='extends' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDomainElementAccess().getExtendsKeyword_1_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainElementRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDomainElementAccess().getSuperTypeDomainElementCrossReference_1_1_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDomainElementAccess().getLeftCurlyBracketKeyword_1_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainElementAccess().getAttributesAttributeParserRuleCall_1_1_4_0()); 
	    }
		lv_attributes_8_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainElementRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_8_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDomainElementAccess().getRightCurlyBracketKeyword_1_1_5());
    }
)
    |((
(
		lv_isEnum_10_0=	'enum' 
    {
        newLeafNode(lv_isEnum_10_0, grammarAccess.getDomainElementAccess().getIsEnumEnumKeyword_1_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainElementRule());
	        }
       		setWithLastConsumed($current, "isEnum", true, "enum");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainElementAccess().getNameQualifiedNameParserRuleCall_1_2_1_0()); 
	    }
		lv_name_11_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_11_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDomainElementAccess().getLeftParenthesisKeyword_1_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainElementAccess().getEnumValuesEnumValParserRuleCall_1_2_3_0()); 
	    }
		lv_enumValues_13_0=ruleEnumVal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainElementRule());
	        }
       		add(
       			$current, 
       			"enumValues",
        		lv_enumValues_13_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.EnumVal");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDomainElementAccess().getRightParenthesisKeyword_1_2_4());
    }
)
    |(	otherlv_15='alias' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDomainElementAccess().getAliasKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainElementAccess().getNameQualifiedNameParserRuleCall_1_3_1_0()); 
	    }
		lv_name_16_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_16_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17='as' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDomainElementAccess().getAsKeyword_1_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainElementAccess().getRealTypeQualifiedNameParserRuleCall_1_3_3_0()); 
	    }
		lv_realType_18_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainElementRule());
	        }
       		set(
       			$current, 
       			"realType",
        		lv_realType_18_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleEnumVal
entryRuleEnumVal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumValRule()); }
	 iv_ruleEnumVal=ruleEnumVal 
	 { $current=$iv_ruleEnumVal.current; } 
	 EOF 
;

// Rule EnumVal
ruleEnumVal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_doc_0_0=RULE_DOC
		{
			newLeafNode(lv_doc_0_0, grammarAccess.getEnumValAccess().getDocDOCTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.DOC");
	    }

)
)*(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumValAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumValAccess().getEqualsSignKeyword_2());
    }
((
(
(
		lv_value_3_1=RULE_ID
		{
			newLeafNode(lv_value_3_1, grammarAccess.getEnumValAccess().getValueIDTerminalRuleCall_3_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_1, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

    |		lv_value_3_2=RULE_STRING
		{
			newLeafNode(lv_value_3_2, grammarAccess.getEnumValAccess().getValueSTRINGTerminalRuleCall_3_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_2, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)

)
)
    |(
(
		lv_intValue_4_0=RULE_INT
		{
			newLeafNode(lv_intValue_4_0, grammarAccess.getEnumValAccess().getIntValueINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intValue",
        		lv_intValue_4_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_documentation_0_0=RULE_DOC
		{
			newLeafNode(lv_documentation_0_0, grammarAccess.getAttributeAccess().getDocumentationDOCTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.DOC");
	    }

)
)*(
(
		lv_optional_1_0=	'optional' 
    {
        newLeafNode(lv_optional_1_0, grammarAccess.getAttributeAccess().getOptionalOptionalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "optional", true, "optional");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getTypeGenericTypeArgumentParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleGenericTypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.GenericTypeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeAccess().getEqualsSignKeyword_4_0());
    }
(
(
		lv_value_5_0=RULE_STRING
		{
			newLeafNode(lv_value_5_0, grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?)
;





// Entry rule entryRuleGenericTypeArgument
entryRuleGenericTypeArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericTypeArgumentRule()); }
	 iv_ruleGenericTypeArgument=ruleGenericTypeArgument 
	 { $current=$iv_ruleGenericTypeArgument.current; } 
	 EOF 
;

// Rule GenericTypeArgument
ruleGenericTypeArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeArgumentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getGenericTypeArgumentAccess().getTypeDomainElementCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGenericTypeArgumentAccess().getLessThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericTypeArgumentAccess().getArgumentsGenericTypeArgumentParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleGenericTypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericTypeArgumentRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.GenericTypeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGenericTypeArgumentAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericTypeArgumentAccess().getArgumentsGenericTypeArgumentParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleGenericTypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericTypeArgumentRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.GenericTypeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGenericTypeArgumentAccess().getGreaterThanSignKeyword_1_3());
    }
)?(
(
		lv_list_6_0=	'[]' 
    {
        newLeafNode(lv_list_6_0, grammarAccess.getGenericTypeArgumentAccess().getListLeftSquareBracketRightSquareBracketKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeArgumentRule());
	        }
       		setWithLastConsumed($current, "list", true, "[]");
	    }

)
)?)
;





// Entry rule entryRuleServiceDef
entryRuleServiceDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceDefRule()); }
	 iv_ruleServiceDef=ruleServiceDef 
	 { $current=$iv_ruleServiceDef.current; } 
	 EOF 
;

// Rule ServiceDef
ruleServiceDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getServiceDefAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getServiceDefAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceDefAccess().getCommandListCommandDefParserRuleCall_2_0()); 
	    }
		lv_commandList_2_0=ruleCommandDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceDefRule());
	        }
       		add(
       			$current, 
       			"commandList",
        		lv_commandList_2_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.CommandDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceDefAccess().getEventListEventDefParserRuleCall_3_0()); 
	    }
		lv_eventList_3_0=ruleEventDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceDefRule());
	        }
       		add(
       			$current, 
       			"eventList",
        		lv_eventList_3_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.EventDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getServiceDefAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCommandDef
entryRuleCommandDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandDefRule()); }
	 iv_ruleCommandDef=ruleCommandDef 
	 { $current=$iv_ruleCommandDef.current; } 
	 EOF 
;

// Rule CommandDef
ruleCommandDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='command' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCommandDefAccess().getCommandKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCommandDefAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommandDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommandDefAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandDefAccess().getAttributesAttributeParserRuleCall_2_1_0()); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandDefRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCommandDefAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_5='returns' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCommandDefAccess().getReturnsKeyword_3());
    }
(	otherlv_6='void' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCommandDefAccess().getVoidKeyword_4_0());
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandDefAccess().getReturnValGenericTypeArgumentParserRuleCall_4_1_0()); 
	    }
		lv_returnVal_7_0=ruleGenericTypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandDefRule());
	        }
       		set(
       			$current, 
       			"returnVal",
        		lv_returnVal_7_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.GenericTypeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleEventDef
entryRuleEventDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDefRule()); }
	 iv_ruleEventDef=ruleEventDef 
	 { $current=$iv_ruleEventDef.current; } 
	 EOF 
;

// Rule EventDef
ruleEventDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_documentation_0_0=RULE_DOC
		{
			newLeafNode(lv_documentation_0_0, grammarAccess.getEventDefAccess().getDocumentationDOCTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventDefRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"documentation",
        		lv_documentation_0_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.DOC");
	    }

)
)*	otherlv_1='event' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventDefAccess().getEventKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEventDefAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDefAccess().getTypeGenericTypeArgumentParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleGenericTypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"at.bestsolution.typescript.service.spec.TSSpec.GenericTypeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_DOC : '##' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


