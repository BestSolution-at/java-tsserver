/*
 * generated by Xtext
 */
package at.bestsolution.typescript.service.spec.serializer;

import at.bestsolution.typescript.service.spec.services.TSSpecGrammarAccess;
import at.bestsolution.typescript.service.spec.tSSpec.Attribute;
import at.bestsolution.typescript.service.spec.tSSpec.CommandDef;
import at.bestsolution.typescript.service.spec.tSSpec.DomainElement;
import at.bestsolution.typescript.service.spec.tSSpec.EnumVal;
import at.bestsolution.typescript.service.spec.tSSpec.EventDef;
import at.bestsolution.typescript.service.spec.tSSpec.GenericTypeArgument;
import at.bestsolution.typescript.service.spec.tSSpec.ServiceDefs;
import at.bestsolution.typescript.service.spec.tSSpec.TSSpecPackage;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public class TSSpecSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TSSpecGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == TSSpecPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case TSSpecPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case TSSpecPackage.COMMAND_DEF:
				sequence_CommandDef(context, (CommandDef) semanticObject); 
				return; 
			case TSSpecPackage.DOMAIN_ELEMENT:
				sequence_DomainElement(context, (DomainElement) semanticObject); 
				return; 
			case TSSpecPackage.ENUM_VAL:
				sequence_EnumVal(context, (EnumVal) semanticObject); 
				return; 
			case TSSpecPackage.EVENT_DEF:
				sequence_EventDef(context, (EventDef) semanticObject); 
				return; 
			case TSSpecPackage.GENERIC_TYPE_ARGUMENT:
				sequence_GenericTypeArgument(context, (GenericTypeArgument) semanticObject); 
				return; 
			case TSSpecPackage.SERVICE_DEFS:
				sequence_ServiceDefs(context, (ServiceDefs) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (documentation+=DOC* optional?='optional'? type=GenericTypeArgument name=ID value=STRING?)
	 */
	protected void sequence_Attribute(EObject context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID attributes+=Attribute* returnVal=GenericTypeArgument?)
	 */
	protected void sequence_CommandDef(EObject context, CommandDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         doc+=DOC* 
	 *         (
	 *             name=QualifiedName | 
	 *             (cust?='cust' name=QualifiedName superType=[DomainElement|QualifiedName]? attributes+=Attribute*) | 
	 *             (name=QualifiedName enumValues+=EnumVal*) | 
	 *             (name=QualifiedName realType=QualifiedName)
	 *         )
	 *     )
	 */
	protected void sequence_DomainElement(EObject context, DomainElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (doc+=DOC* name=ID)
	 */
	protected void sequence_EnumVal(EObject context, EnumVal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (documentation+=DOC* name=ID type=GenericTypeArgument)
	 */
	protected void sequence_EventDef(EObject context, EventDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[DomainElement|QualifiedName] (arguments+=GenericTypeArgument arguments+=GenericTypeArgument*)? list?='[]'?)
	 */
	protected void sequence_GenericTypeArgument(EObject context, GenericTypeArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (packageName=QualifiedName domainElements+=DomainElement* commandList+=CommandDef* eventList+=EventDef*)
	 */
	protected void sequence_ServiceDefs(EObject context, ServiceDefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
