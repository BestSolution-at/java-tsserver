/*
 * generated by Xtext
 */
package at.bestsolution.typescript.service.spec.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.bestsolution.typescript.service.spec.services.TSSpecGrammarAccess;

public class TSSpecParser extends AbstractContentAssistParser {
	
	@Inject
	private TSSpecGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.bestsolution.typescript.service.spec.ui.contentassist.antlr.internal.InternalTSSpecParser createParser() {
		at.bestsolution.typescript.service.spec.ui.contentassist.antlr.internal.InternalTSSpecParser result = new at.bestsolution.typescript.service.spec.ui.contentassist.antlr.internal.InternalTSSpecParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDomainElementAccess().getAlternatives_1(), "rule__DomainElement__Alternatives_1");
					put(grammarAccess.getEnumValAccess().getValueAlternatives_3_0(), "rule__EnumVal__ValueAlternatives_3_0");
					put(grammarAccess.getCommandDefAccess().getAlternatives_4(), "rule__CommandDef__Alternatives_4");
					put(grammarAccess.getServiceDefsAccess().getGroup(), "rule__ServiceDefs__Group__0");
					put(grammarAccess.getDomainElementAccess().getGroup(), "rule__DomainElement__Group__0");
					put(grammarAccess.getDomainElementAccess().getGroup_1_0(), "rule__DomainElement__Group_1_0__0");
					put(grammarAccess.getDomainElementAccess().getGroup_1_1(), "rule__DomainElement__Group_1_1__0");
					put(grammarAccess.getDomainElementAccess().getGroup_1_1_2(), "rule__DomainElement__Group_1_1_2__0");
					put(grammarAccess.getDomainElementAccess().getGroup_1_2(), "rule__DomainElement__Group_1_2__0");
					put(grammarAccess.getDomainElementAccess().getGroup_1_3(), "rule__DomainElement__Group_1_3__0");
					put(grammarAccess.getEnumValAccess().getGroup(), "rule__EnumVal__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_4(), "rule__Attribute__Group_4__0");
					put(grammarAccess.getGenericTypeArgumentAccess().getGroup(), "rule__GenericTypeArgument__Group__0");
					put(grammarAccess.getGenericTypeArgumentAccess().getGroup_1(), "rule__GenericTypeArgument__Group_1__0");
					put(grammarAccess.getGenericTypeArgumentAccess().getGroup_1_2(), "rule__GenericTypeArgument__Group_1_2__0");
					put(grammarAccess.getServiceDefAccess().getGroup(), "rule__ServiceDef__Group__0");
					put(grammarAccess.getCommandDefAccess().getGroup(), "rule__CommandDef__Group__0");
					put(grammarAccess.getCommandDefAccess().getGroup_2(), "rule__CommandDef__Group_2__0");
					put(grammarAccess.getEventDefAccess().getGroup(), "rule__EventDef__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getServiceDefsAccess().getPackageNameAssignment_1(), "rule__ServiceDefs__PackageNameAssignment_1");
					put(grammarAccess.getServiceDefsAccess().getDomainElementsAssignment_2(), "rule__ServiceDefs__DomainElementsAssignment_2");
					put(grammarAccess.getServiceDefsAccess().getServiceDefsAssignment_3(), "rule__ServiceDefs__ServiceDefsAssignment_3");
					put(grammarAccess.getDomainElementAccess().getDocAssignment_0(), "rule__DomainElement__DocAssignment_0");
					put(grammarAccess.getDomainElementAccess().getNameAssignment_1_0_1(), "rule__DomainElement__NameAssignment_1_0_1");
					put(grammarAccess.getDomainElementAccess().getCustAssignment_1_1_0(), "rule__DomainElement__CustAssignment_1_1_0");
					put(grammarAccess.getDomainElementAccess().getNameAssignment_1_1_1(), "rule__DomainElement__NameAssignment_1_1_1");
					put(grammarAccess.getDomainElementAccess().getSuperTypeAssignment_1_1_2_1(), "rule__DomainElement__SuperTypeAssignment_1_1_2_1");
					put(grammarAccess.getDomainElementAccess().getAttributesAssignment_1_1_4(), "rule__DomainElement__AttributesAssignment_1_1_4");
					put(grammarAccess.getDomainElementAccess().getIsEnumAssignment_1_2_0(), "rule__DomainElement__IsEnumAssignment_1_2_0");
					put(grammarAccess.getDomainElementAccess().getNameAssignment_1_2_1(), "rule__DomainElement__NameAssignment_1_2_1");
					put(grammarAccess.getDomainElementAccess().getEnumValuesAssignment_1_2_3(), "rule__DomainElement__EnumValuesAssignment_1_2_3");
					put(grammarAccess.getDomainElementAccess().getNameAssignment_1_3_1(), "rule__DomainElement__NameAssignment_1_3_1");
					put(grammarAccess.getDomainElementAccess().getRealTypeAssignment_1_3_3(), "rule__DomainElement__RealTypeAssignment_1_3_3");
					put(grammarAccess.getEnumValAccess().getDocAssignment_0(), "rule__EnumVal__DocAssignment_0");
					put(grammarAccess.getEnumValAccess().getNameAssignment_1(), "rule__EnumVal__NameAssignment_1");
					put(grammarAccess.getEnumValAccess().getValueAssignment_3(), "rule__EnumVal__ValueAssignment_3");
					put(grammarAccess.getAttributeAccess().getDocumentationAssignment_0(), "rule__Attribute__DocumentationAssignment_0");
					put(grammarAccess.getAttributeAccess().getOptionalAssignment_1(), "rule__Attribute__OptionalAssignment_1");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
					put(grammarAccess.getAttributeAccess().getNameAssignment_3(), "rule__Attribute__NameAssignment_3");
					put(grammarAccess.getAttributeAccess().getValueAssignment_4_1(), "rule__Attribute__ValueAssignment_4_1");
					put(grammarAccess.getGenericTypeArgumentAccess().getTypeAssignment_0(), "rule__GenericTypeArgument__TypeAssignment_0");
					put(grammarAccess.getGenericTypeArgumentAccess().getArgumentsAssignment_1_1(), "rule__GenericTypeArgument__ArgumentsAssignment_1_1");
					put(grammarAccess.getGenericTypeArgumentAccess().getArgumentsAssignment_1_2_1(), "rule__GenericTypeArgument__ArgumentsAssignment_1_2_1");
					put(grammarAccess.getGenericTypeArgumentAccess().getListAssignment_2(), "rule__GenericTypeArgument__ListAssignment_2");
					put(grammarAccess.getServiceDefAccess().getNameAssignment_0(), "rule__ServiceDef__NameAssignment_0");
					put(grammarAccess.getServiceDefAccess().getCommandListAssignment_2(), "rule__ServiceDef__CommandListAssignment_2");
					put(grammarAccess.getServiceDefAccess().getEventListAssignment_3(), "rule__ServiceDef__EventListAssignment_3");
					put(grammarAccess.getCommandDefAccess().getNameAssignment_1(), "rule__CommandDef__NameAssignment_1");
					put(grammarAccess.getCommandDefAccess().getAttributesAssignment_2_1(), "rule__CommandDef__AttributesAssignment_2_1");
					put(grammarAccess.getCommandDefAccess().getReturnValAssignment_4_1(), "rule__CommandDef__ReturnValAssignment_4_1");
					put(grammarAccess.getEventDefAccess().getDocumentationAssignment_0(), "rule__EventDef__DocumentationAssignment_0");
					put(grammarAccess.getEventDefAccess().getNameAssignment_2(), "rule__EventDef__NameAssignment_2");
					put(grammarAccess.getEventDefAccess().getTypeAssignment_3(), "rule__EventDef__TypeAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.bestsolution.typescript.service.spec.ui.contentassist.antlr.internal.InternalTSSpecParser typedParser = (at.bestsolution.typescript.service.spec.ui.contentassist.antlr.internal.InternalTSSpecParser) parser;
			typedParser.entryRuleServiceDefs();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TSSpecGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TSSpecGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
