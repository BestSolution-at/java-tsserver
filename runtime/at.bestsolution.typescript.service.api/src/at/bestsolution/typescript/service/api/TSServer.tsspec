package at.bestsolution.typescript.service.api

javatype java.lang.String
javatype int
javatype boolean


cust model.Diagnostic {
	model.SourceFile file
	int start
	int length
	model.DiagnosticMessage message
	model.DiagnosticCategory category
	int code
}

cust model.DiagnosticMessage {
	java.lang.String messageText
	model.DiagnosticMessageChain messageChain
}

cust model.SourceFile {
	// TODO
}


cust model.DiagnosticMessageChain {
    java.lang.String messageText
	model.DiagnosticCategory category
    int code
    optional model.DiagnosticMessageChain next
}

cust model.TextSpan {
	int start
    int length
}

cust model.Classifications {
	int[] spans
	model.EndOfLineState endOfLineState
}

cust model.CompletionInfo {
	boolean isMemberCompletion
	boolean isNewIdentifierLocation
	model.CompletionEntry[] entries
}

cust model.CompletionEntry {
	java.lang.String name
	model.ScriptElementKind kind
	model.ScriptElementKindModifier[] kindModifiers
	java.lang.String sortText
}

cust model.CompletionEntryDetails {
	java.lang.String name
	model.ScriptElementKind kind
	model.ScriptElementKindModifier[] kindModifiers
	model.SymbolDisplayPart[] displayParts
	model.SymbolDisplayPart[] documentation
}

cust model.SymbolDisplayPart {
	java.lang.String text
	model.SymbolDisplayPartKind kind
}

cust model.QuickInfo {
	model.ScriptElementKind kind
	model.ScriptElementKindModifier[] kindModifiers
	model.TextSpan textSpan
	model.SymbolDisplayPart[] displayParts
	model.SymbolDisplayPart[] documentation
}

cust model.SignatureHelpItems {
	model.SignatureHelpItem[] items
	model.TextSpan applicableSpan
	int selectedItemIndex
	int argumentIndex
	int argumentCount
}

cust model.SignatureHelpItem {
	boolean isVariadic
	model.SymbolDisplayPart[] prefixDisplayParts
	model.SymbolDisplayPart[] suffixDisplayParts
	model.SymbolDisplayPart[] separatorDisplayParts
	model.SignatureHelpParameter[] parameters
	model.SymbolDisplayPart[] documentation
}

cust model.SignatureHelpParameter {
	java.lang.String name
	model.SymbolDisplayPart[] documentation
	model.SymbolDisplayPart[] displayParts
	boolean isOptional
}

cust model.RenameInfo {
	boolean canRename
	java.lang.String localizedErrorMessage
	java.lang.String displayName
	java.lang.String fullDisplayName
	java.lang.String kind
	java.lang.String kindModifiers
	model.TextSpan triggerSpan
}

cust model.RenameLocation {
	model.TextSpan textSpan
	java.lang.String fileName
}

cust model.DefinitionInfo {
	java.lang.String fileName
	model.TextSpan textSpan
	java.lang.String kind
	java.lang.String name
	java.lang.String containerKind
	java.lang.String containerName
}

cust model.ReferenceEntry {
	model.TextSpan textSpan
	java.lang.String fileName
	boolean isWriteAccess
}

cust model.ReferencedSymbol {
	model.DefinitionInfo definition
	model.ReferenceEntry[] references
}

cust model.DocumentHighlights {
	java.lang.String fileName
	model.HighlightSpan[] highlightSpans
}

cust model.HighlightSpan {
	optional java.lang.String fileName
	model.TextSpan textSpan
	model.HighlightSpanKind kind
}

cust model.NavigateToItem {
	java.lang.String name
	model.ScriptElementKind kind
	model.ScriptElementKindModifier[] kindModifiers
	model.PatternMatchKind matchKind
	boolean isCaseSensitive
	java.lang.String fileName
	model.TextSpan textSpan
	java.lang.String containerName
	java.lang.String containerKind
}

cust model.NavigationBarItem {
	java.lang.String text
	model.ScriptElementKind kind
	model.ScriptElementKindModifier[] kindModifiers
	model.TextSpan[] spans
	model.NavigationBarItem[] childItems
	int indent
	boolean bolded
	boolean grayed
}

cust model.OutliningSpan {
	model.TextSpan textSpan
	model.TextSpan hintSpan
	java.lang.String bannerText
	boolean autoCollapse
}

cust model.TodoCommentDescriptor {
	java.lang.String text
	int priority
}

cust model.TodoComment {
	model.TodoCommentDescriptor descriptor
	java.lang.String message
	int position
}

cust model.EditorOptions {
	int IndentSize
	int TabSize
	java.lang.String NewLineCharacter
	boolean ConvertTabsToSpaces
	model.IndentStyle IndentStyle
}

cust model.TextChange {
	model.TextSpan span
	int newLength
}

cust model.FormatCodeOptions {
	int IndentSize
	int TabSize
	java.lang.String NewLineCharacter
	boolean ConvertTabsToSpaces
	model.IndentStyle IndentStyle

	boolean InsertSpaceAfterCommaDelimiter
	boolean InsertSpaceAfterSemicolonInForStatements
	boolean InsertSpaceBeforeAndAfterBinaryOperators
	boolean InsertSpaceAfterKeywordsInControlFlowStatements
	boolean InsertSpaceAfterFunctionKeywordForAnonymousFunctions
	boolean InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis
	boolean InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets
	boolean PlaceOpenBraceOnNewLineForFunctions
	boolean PlaceOpenBraceOnNewLineForControlBlocks
//	[s: string]: boolean | number | string;
}

cust model.TextInsertion {
	java.lang.String newText
	int caretOffset
}

cust model.EmitOutput {
	model.OutputFile[] outputFiles
	boolean emitSkipped
}

cust model.OutputFile {
	java.lang.String name
	boolean writeByteOrderMark
	java.lang.String text
}

cust model.CompilerOptions {
	boolean allowNonTsExtensions
	optional java.lang.String charset
	optional boolean declaration
	optional boolean diagnostics
    optional boolean emitBOM
    optional boolean help
    optional boolean init
    optional boolean inlineSourceMap
    optional boolean inlineSources
    optional boolean jsx
    optional boolean listFiles
    optional java.lang.String locale
    optional java.lang.String mapRoot
//    module?: ModuleKind;
//    newLine?: NewLineKind;
    optional boolean noEmit
    optional boolean noEmitHelpers
    optional boolean noEmitOnError
    optional boolean noErrorTruncation
    optional boolean noImplicitAny
    optional boolean noLib
    optional boolean noResolve
    optional java.lang.String out
    optional java.lang.String outFile
    optional java.lang.String outDir
    optional boolean preserveConstEnums
    optional java.lang.String project
    optional boolean removeComments
    optional java.lang.String rootDir
    optional boolean sourceMap
    optional java.lang.String sourceRoot
    optional boolean suppressExcessPropertyErrors
    optional boolean suppressImplicitAnyIndexErrors
    optional model.ScriptTarget target
    optional boolean version
    optional boolean watch
    optional boolean isolatedModules
    optional boolean experimentalDecorators
    optional boolean emitDecoratorMetadata
//    optional model.ModuleResolutionKind moduleResolution
//    [option: string]: string | number | boolean;
}

enum model.DiagnosticCategory (
    WARNING = Warning
    ERROR = Error
    MESSAGE = Message
)

enum model.EndOfLineState (
	NONE = None
    IN_MULTILINE_COMMENT_TRIVIA = InMultiLineCommentTrivia
    IN_SINGLE_QUOTESTRING_LITERAL = InSingleQuoteStringLiteral
    IN_DOUBLE_QUOTESTRING_LITERAL = InDoubleQuoteStringLiteral
    IN_TEMPLATE_HEAD_OR_NO_SUBSTITUTION_TEMPLATE = InTemplateHeadOrNoSubstitutionTemplate
    IN_TEMPLATE_MIDDLE_OR_TAIL = InTemplateMiddleOrTail
    IN_TEMPLATE_SUBSTITUTION_POSITION = InTemplateSubstitutionPosition
)

enum model.ScriptElementKind (
	UNKNOWN = ""
	WARNING = warning
	KEYWORD = keyword
	SCRIPT_ELEMENT = script
	MODULE_ELEMENT = module
	CLASS_ELEMENT = class
	LOCAL_CLASS_ELEMENT = "local class"
	INTERFACE_ELEMENT = interface
	TYPE_ELEMENT = type
	ENUM_ELEMENT = "enum"
	VARIABLE_ELEMENT = var
	LOCAL_VARIABLE_ELEMENT = "local var"
	FUNCTION_ELEMENT = function
	LOCAL_FUNCTION_ELEMENT = "local function"
	MEMBER_FUNCTION_ELEMENT = method
	MEMBER_GET_ACCESSOR_ELEMENT = getter
	MEMBER_SET_ACCESSOR_ELEMENT = setter
	MEMBER_VARIABLE_ELEMENT = property
	CONSTRUCTOR_IMPLEMENTATION_ELEMENT = constructor
	CALL_SIGNATURE_ELEMENT = call
	INDEX_SIGNATURE_ELEMENT = index
	CONSTRUCT_SIGNATURE_ELEMENT = construct
	PARAMETER_ELEMENT = parameter
	TYPE_PARAMETER_ELEMENT = "type parameter"
	PRIMITIVE_TYPE = "primitive type"
	LABEL = label
	ALIAS = "alias"
	CONST_ELEMENT = const
	LET_ELEMENT = let
)

enum model.ScriptElementKindModifier (
	NONE = ""
	PUBLIC_MEMBER_MODIFIER = public
	PRIVATE_MEMBER_MODIFIER = private
	PROTECTED_MEMBER_MODIFIER = protected
	EXPORTED_MODIFIER = export
	AMBIENT_MODIFIER = declare
	STATIC_MODIFIER = static
	ABSTRACT_MODIFIER = abstract
)

enum model.PatternMatchKind (
	EXACT = exact
	PREFIX = prefix
	SUBSTRING = substring
	CAMELCASE = camelCase
)

enum model.SymbolDisplayPartKind (
	ALIAS_NAME = aliasName
	CLASS_NAME = className
	ENUM_NAME = enumName
	FIELD_NAME = fieldName
	INTERFACE_NAME = interfaceName
	KEYWORD = keyword
	LINE_BREAK = lineBreak
	NUMERIC_LITERAL = numericLiteral
	STRING_LITERAL = stringLiteral
	LOCAL_NAME = localName
	METHOD_NAME = methodName
	MODULE_NAME = moduleName
	OPERATOR = operator
	PARAMETER_NAME = parameterName
	PROPERTY_NAME = propertyName
	PUNCTUATION = punctuation
	SPACE = space
	TEXT = text
	TYPE_PARAMETER_NAME = typeParameterName
	ENUM_MEMBER_NAME = enumMemberName
	FUNCTION_NAME = functionName
	REGULAR_EXPRESSION_LITERAL = regularExpressionLiteral
)

enum model.HighlightSpanKind (
	NONE = none
	DEFINITION = definition
	REFERENCE = reference
	WRITTEN_REFERENCE = writtenReference
)

enum model.IndentStyle (
	NONE = None
	BLOCK = Block
	SMART = Smart
)

enum model.ScriptTarget (
	ES3 = 0
	ES5 = 1
	ES6 = 2
//	ES2015 = 2
//	Latest = 2
)

// -----------------------------------------------------
// -----------------------------------------------------

LanguageService {
	command addFile(java.lang.String filePath) returns java.lang.String
	command removeFile(java.lang.String fileId) returns void

	command initProject( model.CompilerOptions compilerOptions  java.lang.String[] files ) returns java.lang.String[]
	command modifyContent(java.lang.String fileId
		int offset
		int length
		java.lang.String text
	) returns void
	command open(java.lang.String fileId) returns void
	command close(java.lang.String fileId) returns void

	command cleanupSemanticCache returns void

	command getSyntacticDiagnostics(
		java.lang.String fileId
	) returns model.Diagnostic[]

	command getSemanticDiagnostics(
		java.lang.String fileId
	) returns model.Diagnostic[]

	command getCompilerOptionsDiagnostics returns model.Diagnostic[]

	command getEncodedSyntacticClassifications(
		java.lang.String fileId
		model.TextSpan span
	) returns model.Classifications

	command getEncodedSemanticClassifications(java.lang.String fileId
		model.TextSpan span
	) returns model.Classifications

	command getCompletionsAtPosition(java.lang.String fileId int position) returns model.CompletionInfo

	command getCompletionEntryDetails(java.lang.String fileId
		int position java.lang.String entryName
	) returns model.CompletionEntryDetails

	command getQuickInfoAtPosition(java.lang.String fileId
		int position
	) returns model.QuickInfo

	command getNameOrDottedNameSpan(java.lang.String fileId
		int startPos
		int endPos
	) returns model.TextSpan

	command getBreakpointStatementAtPosition(java.lang.String fileId
		int position
	) returns model.TextSpan

	command getSignatureHelpItems(java.lang.String fileId
		int position
	) returns model.SignatureHelpItems

	command getRenameInfo(java.lang.String fileId
		int position
	) returns model.RenameInfo

	command findRenameLocations(java.lang.String fileId
		int position
		boolean findInStrings
		boolean findInComments
	) returns model.RenameLocation[]

	command getDefinitionAtPosition(java.lang.String fileId
		int position
	) returns model.DefinitionInfo[]

	command getTypeDefinitionAtPosition(java.lang.String fileId
		int position
	) returns model.DefinitionInfo[]

	command getReferencesAtPosition(java.lang.String fileId
		int position
	) returns model.ReferenceEntry[]

	command findReferences(java.lang.String fileId
		int position
	) returns model.ReferencedSymbol[]

	command getDocumentHighlights(java.lang.String fileId
		int position
		java.lang.String[] filesToSearch
	) returns model.DocumentHighlights[]

	command getNavigateToItems(java.lang.String searchValue
		optional int maxResultCount
	) returns model.NavigateToItem[]

	command getNavigationBarItems(java.lang.String fileId) returns model.NavigationBarItem[]

	command getOutliningSpans(java.lang.String fileId) returns model.OutliningSpan[]

	command getTodoComments(java.lang.String fileId
		model.TodoCommentDescriptor[] descriptors
	) returns model.TodoComment[]

	command getBraceMatchingAtPosition(java.lang.String fileId
		int position
	) returns model.TextSpan[]

	command getIndentationAtPosition(java.lang.String fileId
		int position
		model.EditorOptions options
	) returns int

	command getFormattingEditsForRange(java.lang.String fileId
		int start
		int end
		model.FormatCodeOptions options
	) returns model.TextChange[]

	command getFormattingEditsForDocument(java.lang.String fileId
		model.FormatCodeOptions options
	) returns model.TextChange[]

	command getFormattingEditsAfterKeystroke(java.lang.String fileId
		int position
		java.lang.String key
		model.FormatCodeOptions options
	) returns model.TextChange[]

	command getDocCommentTemplateAtPosition(java.lang.String fileId
		int position
	) returns model.TextInsertion

	command getEmitOutput(java.lang.String fileId) returns model.EmitOutput

	//command getProgram returns model.Program

	//command getSourceFile(java.lang.String fileId) returns SourceFile
	//command dispose(): void;

}

